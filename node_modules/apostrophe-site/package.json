{
  "name": "apostrophe-site",
  "version": "0.5.22",
  "description": "Create sites powered by the Apostrophe 2 CMS with a minimum of boilerplate code",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/punkave/apostrophe-site.git"
  },
  "keywords": [
    "apostrophe",
    "cms"
  ],
  "author": {
    "name": "P'unk Avenue LLC"
  },
  "license": "MIT",
  "dependencies": {
    "uploadfs": "~1.1.0",
    "apostrophe-pages": "~0.5.x",
    "apostrophe-schemas": "~0.5.x",
    "apostrophe": "~0.5.x",
    "appy": "~0.4.0",
    "async": "0.8.x",
    "lodash": "2.4.x",
    "extend": "~1.2.0",
    "nodemailer": "~0.5.6",
    "i18n": "0.4.1"
  },
  "readme": "# Apostrophe Site\n\nThe Apostrophe Site module makes it easy to build websites with the [Apostrophe](http://github.com/punkave/apostrophe) content management system for Node.\n\n## Installation\n\nIt is easiest to start by cloning the [Apostrophe sandbox project](http://github.com/punkave/apostrophe-sandbox) and pushing it up to your own repository. But skipping that step is pretty easy too. Let's assume you're starting from scratch.\n\nApostrophe itself requires:\n\n* [node](http://nodejs.org/), of course. You must have at least version `0.10`\n* [mongodb](http://www.mongodb.org/) **version 2.2 or better**, on your local machine (or point to another database server)\n* imagemagick, to resize uploaded images (specifically the `convert` and `identify` command line tools)\n\nCreate a new git project, then run `npm install apostrophe-site` to install the module.\n\n## Configuring Your Site\n\nHere's an `app.js` that demonstrates most of the options. Most of this is optional, of course. `root`, `shortName`, `hostName`, `adminPassword` and `sessionSecret` are required, and you almost certainly will want to add a few modules. Everything else is totally skippable.\n\n```javascript\n\n    var site = require('apostrophe-site')({\n      // Allows apostrophe-sites to require stuff\n      // on our behalf and also find our root folder\n      root: module,\n\n      // Used to name the local mongodb database,\n      // if you don't pass a db option with more details\n      shortName: 'mysite',\n\n      // Hostname you plan to give your site\n      hostName: 'mysite.com',\n\n      // Title of your site. Used as a prefix to page titles and feed titles by default\n      title: 'My Site',\n\n      // This defaults to true and delivers HTML, CSS and JS much faster via\n      // gzip transfer encoding. But you can set it to false if you must\n      compress: true,\n\n      // Apostrophe sizes your images to several awesome sizes right out of the box,\n      // but we're greedy and we want something bigger than full (1280)\n      addImageSizes: [\n        {\n          name: 'max',\n          width: 1600,\n          height: 1280\n        }\n      ],\n\n      // By default the media library shows everyone's media until the user decides to\n      // change that with the \"uploaded by\" filter. Want the default to go the other way?\n      // Set the \"owner\" option as shown commented out below\n\n      mediaLibrary: {\n        // owner: 'user'\n      },\n\n      // Set up email transport via nodemailer. By default sendmail is used because\n      // it requires no configuration, but you may use any valid transport, see the\n      // nodemailer module documentation.\n\n      mailer: {\n        transport: 'sendmail',\n        transportOptions: {}\n      },\n\n      // You can always log in at /login as admin, with this password\n      adminPassword: 'SOMETHING SECURE PLEASE',\n\n      // If a visitor tries to access a secured page, give them\n      // a chance to log in and then be redirected to that page\n      secondChanceLogin: true,\n\n      // Invoked after login if secondChanceLogin is not set or\n      // did not result in a page the user was allowed to see\n      redirectAfterLogin: function(req, callback) {\n        if (req.user.permissions.admin) {\n          return callback('/awesomepeople');\n        } else {\n          return callback('/coolpeople');\n        }\n      },\n\n      // Run some middleware on ALL requests. This happens AFTER\n      // basics are in place like sessions and users and i18n.\n      // Middleware functions here may take an initial \"site\" argument\n      // in addition to req, res, next. Modules may also provide\n      // middleware simply by setting a \"middleware\" property on\n      // themselves\n\n      middleware: [ /* middleware, functions, galore */ ],\n\n      sessionSecret: 'SOMETHING RANDOM PLEASE',\n\n      // Any options accepted by the apostrophe-pages module,\n      // such as tabOptions and descendantOptions\n      pages: {\n        // List all the page types users should be able to add here, including\n        // things like \"Blog\" and \"Events\" that are powered by modules, so you get\n        // to pick the order\n        types: [\n          // TODO double check this doesn't get ignored if blog is added later and wasn't wanted\n          { name: 'default', label: 'Default (Two Column)' },\n          { name: 'home', label: 'Home Page' },\n          { name: 'blog', label: 'Blog' },\n          { name: 'events', label: 'Events' }\n        ]\n\n        // Load descendants of homepage and current page two levels deep\n        // instead of one\n        tabOptions: { depth: 2 },\n        descendantOptions: { depth: 2 },\n\n        // Do something special if the URL doesn't match anything else\n        notfound: function(req, callback) {\n          if (req.url === '/special') {\n            req.redirect = '/specialer';\n          }\n          return callback(null);\n        }\n\n        // Run some middleware on the route that serves pages.\n        // This is not global middleware, see the top-level middleware option.\n\n        // Middleware functions may take an initial \"site\" argument\n        // in addition to req, res, next. Modules may also register\n        // page-serving middleware simply by setting a\n        // pageMiddleware property on themselves\n\n        middleware: [ /* middleware, functions, galore */ ],\n\n        // Custom page loader functions beyond those automatically\n        // provided. Already you have the page with the slug 'global'\n        // available at all times, the current page, its tabs, its\n        // descendants, and anything loaded on behalf of your modules,\n        // like blog posts appearing on the current page\n        load: [\n          function(req, callback) {\n            if (!(req.page && (req.page.type === 'fancy'))) {\n              // Doesn't concern us\n              return callback(null);\n            }\n            // Set some custom data to be provided to the nunjucks template.\n            // Anything in the extras object is pushed as data to the\n            // page template.\n            //\n            // We have a callback here, so we could go get anything\n            req.extras.fanciness = true;\n            return callback(null);\n          }\n        ],\n      },\n\n      // Let's add the blog and events modules. You must npm install them.\n      // apostrophe-site will require them for you and pass your options\n      modules: {\n        'apostrophe-events': {\n          widget: true\n        },\n        'apostrophe-blog': {\n          widget: true\n        }\n      },\n\n      // Custom command line tasks. Run like this:\n      // node app project:frobulate\n      // argv is powered by optimist\n      tasks: {\n        project: {\n          frobulate: function(apos, argv, callback) {\n            console.log('Frobulated the hibblesnotz');\n            console.log('You passed these arguments: ' + argv._);\n            return callback(null);\n          }\n        }\n      },\n\n      locals: {\n        // Extra locals visible to every nunjucks template. Functions and\n        // data are both fair game. You may also pass a function that takes\n        // the site object as its sole argument and returns an object containing\n        // the desired locals as properties.\n        embiggen: function(s) {\n          return s * 1000;\n        }\n      },\n\n      assets: {\n        // Loads site.js from public/js\n        scripts: [\n          // load this js file all the time, minify it normally\n          'site',\n          {\n            // Load this JS file only when a user is logged in, never minify it.\n            // 'when' could also be 'always'. 'minify' defaults to true\n            name: 'fancy',\n            when: 'user',\n            minify: false\n          }\n        ],\n        // Loads site.less from public/css\n        stylesheets: [\n          'site'\n        ]\n      },\n\n      // Last best chance to set custom Express routes\n      setRoutes: function(callback) {\n        site.app.get('/wacky', function(req, res) { res.send('wackiness'); });\n        return callback(null);\n      },\n\n      // Just before apos.endAsset. Last chance to push any assets. Usually the\n      // `assets` option above, and calling `pushAsset` from your modules,\n      // is good enough.\n\n      beforeEndAssets: function(callback) {\n        // Apostrophe already loads these for logged-out users, but we\n        // want them all the time in this project.\n        site.apos.pushAsset('script', { name: 'vendor/blueimp-iframe-transport', when: 'always' });\n        site.apos.pushAsset('script', { name: 'vendor/blueimp-fileupload', when: 'always' });\n        return callback(null);\n      },\n\n      // Just before listen. Last chance to set up anything\n      afterInit: function(callback) {\n        return callback(null);\n      },\n\n      sanitizeHtml: {\n        // Any options that can be passed to the sanitize-html\n        // module are valid here. Used to adjust the way we filter\n        // HTML saved in the rich text editor. You probably want\n        // to stick with our standard set of allowed tags and\n        // encourage users to respect your design rather than\n        // fighting it\n      },\n\n      // A simple way to alter the results of every call to apos.get, and thus\n      // every page, snippet, blog post, etc. The retrieved documents will be\n      // in results.pages. Be aware that this property does not always exist,\n      // as apos.get is sometimes used just to fetch distinct tags or\n      // other metadata.\n      afterGet: function(req, results, callback) {\n\n      }\n    });\n\n```\n\n## Adding Modules to the Admin Bar\n\nAdding a module to the `modules` property above does most of the work, but you do need to add it to the admin bar when appropriate. For instance, you'll want the \"blog\" menu to be added at the top of the page when the blog module is installed.\n\nIn our sandbox site or a project cloned from it, you would do that in `outerLayout.html`. Just look for calls like this one:\n\n    {{ aposBlogMenu({ edit: permissions.edit }) }}\n\nConversely, if you choose not to include a module but haven't removed it from the admin bar, don't be surprised when you get a template error.\n\n## Overriding the Templates of a Module\n\nFirst `npm install` and configure `apostrophe-blog`. Then create a `lib/modules/apostrophe-blog/views` folder in your project. Copy any templates you wish to customize from the npm module's views folder to `lib/modules/apostrophe-blog/views`.\n\nBoom! Apostrophe will automatically look first at your \"project level\" module folder.\n\n*This also works for `apostrophe-schemas` and `apostrophe-pages`, even though they are not configured by the `modules` property.* `lib/modules/apostrophe-schemas/views` may contain overrides for schema field templates, and `lib/modules/apostrophe-pages/views` may contain overrides for `newPageSettings.html` and friends.\n\n## Overriding a Module With a New Name\n\nYou can override a module more than once, for instance to set up two things that are similar in spirit to a blog. Just create folders in `lib/modules`, with your `views` overrides, and configure them in `app.js` via the `modules` option as shown above. Then use the `extend` property to tell Apostrophe what module you're extending.\n\nYou'll want to set the `name` and `instance` options so the database can distinguish between your stories and regular blog posts:\n```javascript\n    stories: {\n      extend: 'apostrophe-blog',\n      name: 'stories',\n      instance: 'story',\n      addFields: [\n        {\n          name: 'storyteller',\n          type: 'string'\n        }\n      ]\n    }\n```\nNote that you will need to copy the `new`, `edit` and `manage` templates to your `views` folder and fix any references to `blog` and `blog-post` to refer to `stories` and `story`.\n\n## Overriding the Schema of a Module: Adding Custom Properties\n\nAs seen above, you can add and alter the properties of blog posts and similar things via the `addFields` and `alterFields` options as described in the [apostrophe-snippets](http://github.com/punkave/apostrophe-snippets) documentation. Those options can go right in the configuration for your module in `app.js`.\n\n## Overriding and Extending Methods of a Module\n\nIf you really need to change a module's behavior, for instance changing what the page loader function does or the way it fetches data from the database, you'll need to subclass it. But we've made subclassing much easier. Just create an `index.js` file in your `lib/modules/mymodulename` folder.\n\nHere's a really simple subclass that changes the way the `index` method of the blog behaves so that a featured story is available to the `index.html` template as the `featured` variable in nunjucks:\n```javascript\n    module.exports = stories;\n\n    function stories(options, callback) {\n      return new stories.Stories(options, callback);\n    }\n\n    stories.Stories = function(options, callback) {\n      var self = this;\n\n      module.exports.Super.call(this, options, null);\n\n      var superIndex = self.index;\n      self.index = function(req, snippets, callback) {\n        self.get(req, { tags: 'featured' }, { limit: 1 }, function(err, results) {\n          if(err) {\n            callback(err);\n          }\n          if(results.total > 0) {\n            req.extras.featured = results.snippets[0];\n          }\n          superIndex(req, snippets, callback);\n        });\n      };\n\n      // Must wait at least until next tick to invoke callback!\n      if (callback) {\n        process.nextTick(function() { return callback(null); });\n      }\n\n    };\n```\nNote the use of `module.exports.Super`. This automatically points to the base class constructor.\n\nConfused? Just remember to follow this pattern and put your method overrides after the call to `module.exports.Super`.\n\n## Tip: Subclassing Snippets is Often a Good Idea\n\nIf it doesn't smell like a blog post, you probably want to subclass snippets instead. The blog module simply subclasses snippets and adds the idea of a publication date.\n\n## Modules Can Have Nothing To Do With Snippets\n\nYou can configure modules that have nothing at all to do with snippets, too. Our own RSS and Twitter modules, for instance.\n\nTo configure a module with `apostrophe-site`, all you have to do is make sure it looks like this:\n```javascript\n    module.exports = factory;\n\n    function factory(options, callback) {\n      return new Construct(options, callback);\n    }\n\n    function Construct(options, callback) {\n      var self = this;\n      // Add a bunch of methods to self here, then...\n\n      // Invoke the callback. This must happen on next tick or later!\n      return process.nextTick(function() {\n        return callback(null);\n      });\n    }\n\n    // Export the constructor so others can subclass\n    factory.Construct = Construct;\n```\nIn a nutshell: you must export a factory function, and it must have a constructor as its `Construct` property.\n\n## Options Provided to Modules\n\nIn addition to the options you specify in `app.js`, all modules receive:\n\n`apos`: the `apos` object, a singleton which provides core methods for content management. See the [apostrophe](http://github.com/punkave/apostrophe) module documentation.\n\n`pages`: the `pages` object, a singleton which provides methods for dealing with the page tree. See the [apostrophe-pages](http://github.com/punkave/apostrophe-pages) module documentation.\n\n`schemas`: the `schemas` object, a singleton which provides methods for dealing with schemas. Most of the time you won't interact with this directly, but you might if you're writing a module that handles moderated submissions and the like. See the [apostrophe-schemas](http://github.com/punkave/apostrophe-schemas) module documentation.\n\n`mailer`: a `nodemailer` transport object, ready to send email as needed. See the [nodemailer](http://www.nodemailer.com/) documentation.\n\n`site`: an object containing `title`, `shortName` and `hostName` properties, as configured in `app.js`.\n\n`modules`: an array of objects with `web` and `fs` properties, specifying the web and filesystem paths to each folder in the chain of overrides, which is useful if you wish to allow project-level overrides via `lib/modules` of views provided by an npm module. You can take advantage of this easily if you use the `mixinModuleAssets` and `serveAssets` mixins; see `assets.js` in the apostrophe module for documentation.\n\n## Accessing Other Modules\n\nAfter all modules have been initialized, `apostrophe-site` calls the `setBridge` method on each module that has one. This method receives an object containing all of the modules as properties. The `people` module, for instance, uses the bridge to access the `groups` module. Note that this is not called until after all modules have invoked their initialization callback.\n\n## Publishing Modules\n\nYou can write custom modules in `lib/modules` for your project-specific needs, or install them with npm. If you use `lib/modules`, your module's code must load from `lib/modules/mymodulename/index.js`.\n\n## Limitations\n\nCurrently `extend` does not check `lib/modules`, so the module you are extending must be published in npm. Most of the time we extend modules like `apostrophe-blog` and `apostrophe-snippets` in simple project-specific ways, so this isn't much of a problem so far.\n\n## Internationalization\n\nUsing i18n is simple you enable it by adding the following in your apostrophe-site configuration in app.js:\n\n```javascript\ni18n: {\n    // setup some locales - other locales default to defaultLocale silently\n    locales:['en', 'de'],\n\n    // you may alter a site wide default locale (optional, defaults to 'en')\n    defaultLocale: 'de',\n\n    // sets a custom cookie name to parse locale settings from  - defaults to apos_language (optional)\n    cookie: 'yourcookiename',\n\n    // whether to write new locale information to disk automatically - defaults to true (you will want to shut it off in production)\n    // updateFiles: false\n}\n```\n\nAfter doing this, you can internationalise text in your own templates with:\n\n    {{ __('A sample string') }}\n\nThe `__` local will take care of language detection and will spit out the appropriate string from the JSON files that will be located in the `locales` folder of your project by default. If you look in that folder, you'll see multiple JSON files with a two letter language abbreviation as a filename, for instance:\n\n    en.json\n    de.json\n\nThose will contain all the necessary strings. By default, i18n will automatically put anything new it finds there. However, you can disable this behaviour by setting `updateFiles` to false.\n\n## More Modules, More Documentation\n\nSee [apostrophe](http://github.com/punkave/apostrophe),\n[apostrophe-sandbox](http://github.com/punkave/apostrophe-sandbox),\n[apostrophe-pages](http://github.com/punkave/apostrophe-pages),\n[apostrophe-snippets](http://github.com/punkave/apostrophe-snippets),\n[apostrophe-blog](http://github.com/punkave/apostrophe-blog),\n[apostrophe-events](http://github.com/punkave/apostrophe-events),\n[apostrophe-map](http://github.com/punkave/apostrophe-map),\n[apostrophe-groups](http://github.com/punkave/apostrophe-groups),\n[apostrophe-people](http://github.com/punkave/apostrophe-people),\n[apostrophe-rss](http://github.com/punkave/apostrophe-rss) and\n[apostrophe-twitter](http://github.com/punkave/apostrophe-twitter).\n\nAlso browse the [`apostrophe` tag on npm](https://npmjs.org/browse/keyword/apostrophe).\n\n## Community\n\nYou should join the [apostrophenow Google Group](https://groups.google.com/forum/?fromgroups#!forum/apostrophenow) for discussion of both Apostrophe 1.5 and Apostrophe 2.\n\n## Thanks for using Apostrophe!\n\n[P'unk Avenue](http://punkave.com)\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/punkave/apostrophe-site/issues"
  },
  "homepage": "https://github.com/punkave/apostrophe-site",
  "_id": "apostrophe-site@0.5.22",
  "_from": "apostrophe-site@0.5.x"
}
