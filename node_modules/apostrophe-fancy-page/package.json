{
  "name": "apostrophe-fancy-page",
  "version": "0.5.10",
  "description": "A superclass for modules that enhance \"regular pages\" in the Apostrophe CMS with custom page settings, loader functions, dispatcher, etc.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/punkave/apostrophe-fancy-page.git"
  },
  "keywords": [
    "apostrophe",
    "cms",
    "pages"
  ],
  "author": {
    "name": "P'unk Avenue LLC"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/punkave/apostrophe-fancy-page/issues"
  },
  "homepage": "https://github.com/punkave/apostrophe-fancy-page",
  "dependencies": {
    "extend": "~1.2.1",
    "async": "0.8.x",
    "lodash": "2.4.x"
  },
  "readme": "# apostrophe-fancy-page\n\nThis module lets you add custom properties to \"regular pages\" on your [Apostrophe](http://github.com/punkave/apostrophe-sandbox) CMS site. With this module, a page can have subpages and yet also have custom properties in the page settings dialog, including \"joins\" with other page types and snippet types, without writing extra JavaScript code.\n\n**Table of Contents**\n* [Adding Custom Properties](#adding-custom-properties)\n* [Adding Joins](#adding-joins)\n* [Custom Rendering](#custom-rendering)\n* [Greedy Pages](#greedy-pages)\n* [Passing Extra Information to Templates](#passing-extra-information-to-templates)\n\n## Adding Custom Properties\n\nLet's say we already have a page type called \"Company,\" set up with the rest of our page types in `app.js`:\n\n```javacript\n  pages: [\n    'home',\n    'default',\n    'company'\n  ]\n```\n\nThis is fine but we want to know the year each company was incorporated.\n\nSo let's subclass `apostrophe-fancy-page`:\n\n```javascript\nmodules: {\n  // Other modules go here\n  company: {\n    extend: 'apostrophe-fancy-page',\n    name: 'company',\n    label: 'Company',\n    addFields: [\n      {\n        name: 'incorporated',\n        label: 'Incorporated',\n        type: 'integer'\n      }w\n    ]\n  }\n}\n```\n\n**We also must create the folder `lib/modules/company` in our project.** This folder can start out empty and often stays that way.\n\nNow restart your site and add a page with the \"Company\" page type. Boom! There's an \"Incorporated\" field in \"Page Settings.\"\n\nYou can access this field in your templates:\n\n    {{ page.typeSettings.incorporated }}\n\n\"OK, but what other field types are there?\" `apostrophe-fancy-page` uses Apostrophe schemas. You can do anything that is [supported by Apostrophe schemas](http://github.com/punkave/apostrophe-schemas). It's exactly like adding fields to snippet subclasses like `apostrophe-blog` and `apostrophe-events`.\n\n## Adding Joins\n\nYou can add joins too. They work [exactly as documented here](http://github.com/punkave/apostrophe-schemas). You can join with other fancy page types, or with snippet instance types like `blogPost`.\n\n## Custom Rendering\n\nBy default, you'll just write a `company.html` in your project's `views/pages` folder, like you would with regular page types.\n\nHowever, the `apostrophe-fancy-pages` module is all hooked up to let you override the `dispatch` method to change this behavior.\n\nTo do that you'll need an `index.js` file in your `lib/modules/company` folder, with a constructor for your module. After you invoke the superclass constructor you can provide an override of the dispatcher:\n\n```javascript\nmodule.exports = company;\n\nfunction company(options, callback) {\n  return new company.Company(options, callback);\n}\n\ncompany.Company = function(options, callback) {\n  var self = this;\n\n  module.exports.Super.call(this, options, null);\n\n  self.dispatcher = function(req, callback) {\n    return self.renderer('index.html');\n  };\n\n  if (callback) {\n    process.nextTick(function() { return callback(null); });\n  }\n};\n```\n\nIn this example, the dispatcher has been overridden to render `lib/modules/company/views/index.html` instead of `views/pages/company.html`.\n\nYou can do other nifty tricks in your dispatcher:\n\n```javascript\n// Let's turn it into a 404\nreq.notfound = true;\n\n// Or, redirect somewhere\nreq.redirect = 'http://somewhere';\n```\n\n## Greedy Pages\n\nBy default, if the slug of your page is:\n\n    /xyzcorp\n\nAnd the URL is:\n\n    /xyzcorp/foobar\n\nAnd there is no other page at /xyzcorp/foobar, then the user will get a 404 Not Found error.\n\nYou can change this behavior. If you set `greedy: true` when configuring your module, then if no other page matches more exactly and the URL begins with `/xyzcorp/`, your page will still appear.\n\nIn your dispatcher, you can access the rest of the URL (the part after `/xyzcorp`) via `req.remainder`. You can use that to decide to render things differently.\n\n## Passing Extra Information to Templates\n\nYou can pass extra information to the page template by adding it as properties of the `req.extras` object. Any properties of that object are automatically visible to Nunjucks when the page is rendered.\n\n## When Two Fancy Pages Share A Module\n\nSometimes you might find it convenient for two fancy pages to share the same module. After all, nothing stops you from constructing two objects that subclass fancy pages inside a single module's constructor function. However, there's a catch: they would both render the same `pageSettings.html` and load the same `editor.js` and `content.js`.\n\nYou can address this by passing these options to the fancy pages constructor:\n\n```\n  pageSettingsTemplate: 'indexPageSettings',\n  editorScript: 'indexEditor',\n  contentScript: 'indexContent'\n```\n\nThe forthcoming `apostrophe-blog-2` module relies on this approach and can be referred to as a reference on this technique.\n\n",
  "readmeFilename": "README.md",
  "_id": "apostrophe-fancy-page@0.5.10",
  "_from": "apostrophe-fancy-page@0.5.x"
}
